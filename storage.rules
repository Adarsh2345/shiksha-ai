
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Safely checks if a user is a teacher in the specified classroom.
    function isTeacherInClassroom(userId, classroomId) {
      let docPath = /databases/$(database)/documents/classrooms/$(classroomId);
      // 1. Check if the document exists.
      // 2. Check if the 'teacherIds' key exists in the document's data.
      // 3. Check if the value is a list.
      // 4. Check if the user's ID is in that list.
      return exists(docPath)
        && 'teacherIds' in get(docPath).data
        && get(docPath).data.teacherIds is list
        && userId in get(docPath).data.teacherIds;
    }

    // Safely checks if a user is a member (teacher or student) of the specified classroom.
    function isMemberOfClassroom(userId, classroomId) {
      let docPath = /databases/$(database)/documents/classrooms/$(classroomId);
      // The get() call is only safe after exists() returns true.
      return exists(docPath) && (
        ( 'teacherIds' in get(docPath).data && get(docPath).data.teacherIds is list && userId in get(docPath).data.teacherIds ) ||
        ( 'studentIds' in get(docPath).data && get(docPath).data.studentIds is list && userId in get(docPath).data.studentIds )
      );
    }

    match /classrooms/{classroomId}/files/{fileName} {

      // Allow authenticated members of the classroom to read files.
      allow read: if request.auth != null && isMemberOfClassroom(request.auth.uid, classroomId);

      // Allow teachers in the classroom to write (create/update) PDF files under 10MB.
      allow write: if request.auth != null
        && isTeacherInClassroom(request.auth.uid, classroomId)
        && request.resource.size < 10 * 1024 * 1024
        && request.resource.contentType == 'application/pdf';

      // Allow teachers in the classroom to delete files.
      allow delete: if request.auth != null && isTeacherInClassroom(request.auth.uid, classroomId);
    }
  }
}
