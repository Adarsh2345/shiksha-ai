rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to safely check for field existence and key presence in a list
    function isIdInList(doc, field, id) {
      return field in doc.data && id in doc.data[field];
    }
    
    // Helper to check if a user is a member of a classroom (teacher or student)
    function isClassroomMember(classroomId, userId) {
      let classroomDoc = get(/databases/$(database)/documents/classrooms/$(classroomId));
      return isIdInList(classroomDoc, 'teacherIds', userId) || isIdInList(classroomDoc, 'studentIds', userId);
    }
    
    // Helper to check if a user is a teacher of a classroom
    function isClassroomTeacher(classroomId, userId) {
      let classroomDoc = get(/databases/$(database)/documents/classrooms/$(classroomId));
      return isIdInList(classroomDoc, 'teacherIds', userId);
    }

    // Helper function to check if a request comes from the dev admin panel (unauthenticated)
    function fromAdminPanel() {
      // THIS IS FOR DEVELOPMENT ONLY.
      // In production, this should always return false or be removed.
      return request.auth == null;
    }

    match /teachers/{teacherId} {
      allow read: if request.auth != null || fromAdminPanel();
      // A teacher can only create/update their own document
      allow create, update: if (request.auth != null && request.auth.uid == teacherId) || fromAdminPanel();
      allow delete: if fromAdminPanel();

      // A teacher can manage their own lesson history
      match /lessonHistory/{docId} {
        allow read, create: if request.auth != null && request.auth.uid == teacherId;
      }
    }

    match /students/{studentId} {
       allow read: if request.auth != null || fromAdminPanel();
       // A student can only create/update their own document
       allow create, update: if (request.auth != null && request.auth.uid == studentId) || fromAdminPanel();
       allow delete: if fromAdminPanel();
    }
    
    match /classrooms/{classroomId} {
      // Allow any authenticated user to see the list of all classrooms (for teachers to browse).
      allow list: if request.auth != null;
      // Allow a user to get the details of a specific classroom only if they are a member.
      allow get: if request.auth != null && isClassroomMember(classroomId, request.auth.uid);
      
      // `create` is needed for student signup to create a new classroom doc if it doesn't exist.
      // Unauthenticated admin panel can also create.
      allow create: if fromAdminPanel() || (request.auth != null && request.resource.data.keys().hasAny(['studentIds']));

      // `update` is needed for teachers to join/leave (modifying `teacherIds`).
      // WARNING: This rule is permissive. For production, you might restrict this further.
      allow update: if request.auth != null;
    }

    match /classrooms/{classroomId}/posts/{postId} {
      allow read: if request.auth != null && isClassroomMember(classroomId, request.auth.uid);
      
      // Only teachers in the classroom can create posts.
      allow create: if request.auth != null && isClassroomTeacher(classroomId, request.auth.uid);

      // A teacher can only delete their own posts.
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId && isClassroomTeacher(classroomId, request.auth.uid);
    }
    
    match /lessonPlans/{lessonPlanId} {
      // Any authenticated user can read a lesson plan.
    	allow read: if request.auth != null;
      // A lesson plan is created when a teacher shares it.
      // The 'create' rule needs to check that the authorId in the new document matches the signed-in user's ID.
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
    }
  }
}
