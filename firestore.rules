
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isTeacher(userId) {
      return exists(/databases/$(database)/documents/teachers/$(userId));
    }

    function isClassroomMember(classroomId, userId) {
      let classroomResource = get(/databases/$(database)/documents/classrooms/$(classroomId));
      if (classroomResource.data == null) {
        return false;
      }
      let studentIds = classroomResource.data.get('studentIds', []);
      let teacherIds = classroomResource.data.get('teacherIds', []);
      return userId in studentIds || userId in teacherIds;
    }
    
    function isClassroomTeacher(classroomId, userId) {
      let classroomResource = get(/databases/$(database)/documents/classrooms/$(classroomId));
      // Check that classroom and teacherIds list exist
      if (classroomResource.data == null || !('teacherIds' in classroomResource.data)) {
        return false;
      }
      return userId in classroomResource.data.teacherIds;
    }

    match /teachers/{teacherId} {
      allow read: if true;
      allow create: if (request.auth.uid == teacherId) || (request.auth == null);
      allow update: if request.auth.uid == teacherId;
      allow delete: if request.auth == null;

      match /lessonHistory/{docId} {
        allow read, create: if request.auth.uid == teacherId;
      }
    }

    match /students/{studentId} {
       allow read: if true;
       allow create: if (request.auth.uid == studentId) || (request.auth == null);
       allow update: if request.auth.uid == studentId;
       allow delete: if request.auth == null;
    }
    
    match /classrooms/{classroomId} {
      allow list: if request.auth != null;
      allow get: if (request.auth != null && isClassroomMember(classroomId, request.auth.uid)) || (request.auth == null);
      allow create, update: if (request.auth != null && isTeacher(request.auth.uid)) || request.auth == null;
    }

    match /classrooms/{classroomId}/posts/{postId} {
      allow read: if (request.auth != null && isClassroomMember(classroomId, request.auth.uid)) || (request.auth == null);
      allow create: if request.auth != null 
                      && isClassroomTeacher(classroomId, request.auth.uid)
                      && request.resource.data.authorId == request.auth.uid
                      && request.resource.data.authorName is string
                      && (
                        (
                          request.resource.data.type == 'message' && 
                          request.resource.data.content is string
                        ) ||
                        (
                          request.resource.data.type == 'lessonPlan' &&
                          request.resource.data.lessonPlanId is string &&
                          request.resource.data.topic is string &&
                          request.resource.data.subject is string
                        ) ||
                        (
                          request.resource.data.type == 'worksheet' &&
                          request.resource.data.worksheetId is string &&
                          request.resource.data.gradeLevel is string
                        ) ||
                        (
                          request.resource.data.type == 'pdf' &&
                          request.resource.data.content is string &&
                          request.resource.data.fileName is string &&
                          request.resource.data.fileUrl is string
                        )
                      );
      allow delete: if request.auth != null && resource.data.authorId == request.auth.uid && isClassroomTeacher(classroomId, request.auth.uid);
    }
    
    match /lessonPlans/{lessonPlanId} {
      allow read: if true;
      allow create: if request.auth != null 
                      && isTeacher(request.auth.uid)
                      && request.resource.data.authorId == request.auth.uid
                      && request.resource.data.authorName is string
                      && request.resource.data.topic is string
                      && request.resource.data.subject is string
                      && request.resource.data.gradeLevel is string
                      && request.resource.data.weeklyPlan is string;
    }
    
    match /worksheets/{worksheetId} {
      allow read: if true;
      allow create: if request.auth != null 
                      && isTeacher(request.auth.uid)
                      && request.resource.data.authorId == request.auth.uid
                      && request.resource.data.authorName is string
                      && request.resource.data.gradeLevel is string
                      && request.resource.data.worksheetContent is string;
    }
  }
}
