rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isTeacher(userId) {
      return exists(/databases/$(database)/documents/teachers/$(userId));
    }
    
    function isStudent(userId) {
      return exists(/databases/$(database)/documents/students/$(userId));
    }

    function isClassroomTeacher(classroomId, userId) {
      let classroomDoc = get(/databases/$(database)/documents/classrooms/$(classroomId));
      // Safely check if teacherIds property exists and if the user is in it.
      return 'teacherIds' in classroomDoc.data && userId in classroomDoc.data.teacherIds;
    }

    function isClassroomMember(classroomId, userId) {
        let classroomDoc = get(/databases/$(database)/documents/classrooms/$(classroomId));
        // Safely check properties before accessing them.
        let teacherIds = classroomDoc.data.get('teacherIds', []);
        let studentIds = classroomDoc.data.get('studentIds', []);
        return userId in teacherIds || userId in studentIds;
    }
    
    // Rules for User Profiles (Teachers & Students)
    match /teachers/{teacherId} {
      // Anyone can read teacher profiles
      allow read: if true;
      // Users can create their own teacher profile, or admin can create them
      allow create: if isUser(teacherId) || request.auth == null;
      // Teachers can update their own profile
      allow update: if isUser(teacherId);
      // Only admin can delete
      allow delete: if request.auth == null;

      // Teachers can manage their own lesson history
      match /lessonHistory/{docId} {
        allow read, create: if isUser(teacherId);
      }
    }

    match /students/{studentId} {
       // Anyone can read student profiles (e.g. for classroom member lists)
       allow read: if true;
       // Users can create their own student profile, or admin can create them
       allow create: if isUser(studentId) || request.auth == null;
       // Students can update their own profile (future feature)
       allow update: if isUser(studentId);
       // Only admin can delete
       allow delete: if request.auth == null;
    }
    
    // Rules for Classrooms
    match /classrooms/{classroomId} {
      // Any authenticated user can list available classrooms
      allow list: if isAuth();
      // Only members of the classroom can view its details
      allow get: if isAuth() && isClassroomMember(classroomId, request.auth.uid);
      // Only teachers can create or update classrooms (e.g., joining/leaving)
      allow create, update: if isAuth() && isTeacher(request.auth.uid);
    }

    // Rules for Classroom Posts
    match /classrooms/{classroomId}/posts/{postId} {
      // Any classroom member can read posts
      allow read: if isAuth() && isClassroomMember(classroomId, request.auth.uid);
      // Only a teacher in that specific classroom can create a post
      allow create: if isAuth()
                      && isClassroomTeacher(classroomId, request.auth.uid)
                      && request.resource.data.authorId == request.auth.uid
                      && request.resource.data.authorName is string
                      && (
                        (request.resource.data.type == 'message' && request.resource.data.content is string)
                        || (request.resource.data.type == 'lessonPlan' && request.resource.data.lessonPlanId is string)
                        || (request.resource.data.type == 'worksheet' && request.resource.data.worksheetId is string)
                        || ((request.resource.data.type == 'pdf' || request.resource.data.type == 'image') && request.resource.data.fileName is string && request.resource.data.fileUrl is string)
                      );
      // Only the author of the post, who must also be a teacher in the class, can delete it.
      allow delete: if isAuth() && resource.data.authorId == request.auth.uid && isClassroomTeacher(classroomId, request.auth.uid);
    }
    
    // Rules for Shared Content (Lesson Plans & Worksheets)
    match /lessonPlans/{lessonPlanId} {
      // Anyone authenticated can view a shared lesson plan
      allow read: if isAuth();
      // Only a teacher can create a lesson plan, with correct data fields
      allow create: if isAuth()
                      && isTeacher(request.auth.uid)
                      && request.resource.data.authorId == request.auth.uid
                      && request.resource.data.authorName is string
                      && request.resource.data.topic is string
                      && request.resource.data.subject is string
                      && request.resource.data.gradeLevel is string
                      && request.resource.data.weeklyPlan is string;
    }
    
    match /worksheets/{worksheetId} {
      // Anyone authenticated can view a shared worksheet
      allow read: if isAuth();
      // Only a teacher can create a worksheet, with correct data fields
      allow create: if isAuth()
                      && isTeacher(request.auth.uid)
                      && request.resource.data.authorId == request.auth.uid
                      && request.resource.data.authorName is string
                      && request.resource.data.gradeLevel is string
                      && request.resource.data.worksheetContent is string;
    }
  }
}