
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isTeacher(userId) {
      return isAuth() && exists(/databases/$(database)/documents/teachers/$(userId));
    }
    
    function isStudent(userId) {
      return isAuth() && exists(/databases/$(database)/documents/students/$(userId));
    }

    function isTeacherInClassroom(classroomId) {
      let classroomData = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return 'teacherIds' in classroomData && request.auth.uid in classroomData.teacherIds;
    }

    function isStudentInClassroom(classroomId) {
      let classroomData = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return 'studentIds' in classroomData && request.auth.uid in classroomData.studentIds;
    }

    function isClassroomMember(classroomId) {
      return isTeacherInClassroom(classroomId) || isStudentInClassroom(classroomId);
    }
    
    function isPostAuthor(post) {
      return isAuth() && request.auth.uid == post.authorId;
    }
    
    // Validates the data for a new post
    function isValidPost() {
      let data = request.resource.data;
      // Common fields
      let hasCommonFields = data.keys().hasAll(['authorId', 'authorName', 'createdAt', 'type'])
                            && data.authorId == request.auth.uid
                            && data.authorName is string
                            && data.createdAt == request.time;
                            
      if (!hasCommonFields) { return false; }
      
      // Type-specific fields
      if (data.type == 'message') {
        return data.content is string;
      }
      if (data.type == 'lessonPlan') {
        return data.keys().hasAll(['lessonPlanId', 'topic', 'subject'])
               && data.lessonPlanId is string
               && data.topic is string
               && data.subject is string;
      }
      if (data.type == 'worksheet') {
        return data.keys().hasAll(['worksheetId', 'gradeLevel'])
               && data.worksheetId is string
               && data.gradeLevel is string;
      }
      
      return false; // Unknown post type
    }
    
    // Rules for Collections
    
    match /teachers/{teacherId} {
      allow get: if isAuth();
      allow list: if isAuth();
      allow create, update: if isOwner(teacherId);
      
      // Admin panel access for dev-generated users
      allow read, create, delete: if request.auth == null;

      match /lessonHistory/{docId} {
        allow read, create: if isOwner(teacherId);
      }
    }

    match /students/{studentId} {
       allow get: if isAuth();
       allow list: if isAuth();
       allow create, update: if isOwner(studentId);
       
       // Admin panel access for dev-generated users
       allow read, create, delete: if request.auth == null;
    }
    
    match /classrooms/{classroomId} {
      allow list: if isAuth();
      allow get: if isClassroomMember(classroomId);

      // Teachers can join/leave (update teacherIds)
      // Students can be added (update studentIds)
      allow update: if isTeacher(request.auth.uid) || isStudent(request.auth.uid);
      
      // Admin panel access for dev-generated classrooms
      allow create, update: if request.auth == null;
    }

    match /classrooms/{classroomId}/posts/{postId} {
      allow list, get: if isClassroomMember(classroomId);
      
      allow create: if isTeacherInClassroom(classroomId) && isValidPost();

      allow delete: if isTeacherInClassroom(classroomId) && isPostAuthor(resource.data);
    }

    match /lessonPlans/{lessonPlanId} {
      allow get: if isAuth();
      allow create: if isTeacher(request.auth.uid);
    }
    
    match /worksheets/{worksheetId} {
      allow get: if isAuth();
      allow create: if isTeacher(request.auth.uid);
    }
  }
}
