rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isTeacher(userId) {
      return exists(/databases/$(database)/documents/teachers/$(userId));
    }
    
    function isStudent(userId) {
      return exists(/databases/$(database)/documents/students/$(userId));
    }

    function isTeacherInClassroom(classroomId, userId) {
      // Safely check if teacher is in the classroom's teacherIds list.
      let classroomData = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return 'teacherIds' in classroomData && userId in classroomData.teacherIds;
    }

    function isStudentInClassroom(classroomId, userId) {
       // Safely check if student is in the classroom's studentIds list.
      let classroomData = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return 'studentIds' in classroomData && userId in classroomData.studentIds;
    }

    // Check if the user is any kind of member in the specified classroom.
    function isClassroomMember(classroomId, userId) {
      return isTeacherInClassroom(classroomId, userId) || isStudentInClassroom(classroomId, userId);
    }


    // USER PROFILE RULES
    match /teachers/{teacherId} {
      // The teacher can read or update their own profile.
      allow get, update: if isUser(teacherId);
      // Creating/deleting is open for the admin panel and signup. Not for production.
      allow create, delete: if true;
    }

    match /students/{studentId} {
      // The student themselves or any teacher can read the student's profile.
      allow get: if isUser(studentId) || (isAuth() && isTeacher(request.auth.uid));
      // Creating/deleting is open for the admin panel and signup. Not for production.
      allow create, delete: if true; 
      allow update: if false; // Students can't update their own profile.
    }


    // TEACHER-SPECIFIC SUBCOLLECTIONS
    match /teachers/{teacherId}/lessonHistory/{lessonId} {
      // Teacher can manage their own lesson history.
      allow read, write: if isUser(teacherId);
    }
    

    // CLASSROOM RULES
    match /classrooms/{classroomId} {
      // Any authenticated member of the classroom can read its details.
      allow get: if isAuth() && isClassroomMember(classroomId, request.auth.uid);
                    
      // Only teachers can update classroom details (e.g., joining/leaving).
      allow update: if isAuth() && isTeacher(request.auth.uid);
        
      // Classrooms are created on the fly by student signup or admin generation.
      allow create: if true;

      // POSTS SUBCOLLECTION
      match /posts/{postId} {
        // Any authenticated member of the classroom can read posts.
        allow read: if isAuth() && isClassroomMember(classroomId, request.auth.uid);
                        
        // Only teachers in the classroom can create posts.
        // For delete, we also check if they are the author.
        allow create: if isAuth() && isTeacher(request.auth.uid) && isTeacherInClassroom(classroomId, request.auth.uid);
        allow delete: if isAuth() && isTeacher(request.auth.uid) && request.resource.data.authorId == request.auth.uid;
      }
    }

    // SHARED CONTENT RULES
    match /lessonPlans/{lessonPlanId} {
      // Any authenticated user can read a shared lesson plan.
      allow get: if isAuth();
      // Only an authenticated teacher can create a shared lesson plan.
      allow create: if isAuth() && isTeacher(request.auth.uid) && request.resource.data.authorId == request.auth.uid;
    }

    match /worksheets/{worksheetId} {
      // Any authenticated user can read a shared worksheet.
      allow get: if isAuth();
      // Only an authenticated teacher can create a shared worksheet.
      allow create: if isAuth() && isTeacher(request.auth.uid) && request.resource.data.authorId == request.auth.uid;
    }
  }
}
